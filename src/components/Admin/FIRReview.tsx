import React, { useEffect, useState } from 'react';

interface FIR {
  id: string;
  touristId: string;
  touristName: string;
  incidentType: string;
  description: string;
  location: {
    latitude: number;
    longitude: number;
    address?: string;
  };
  incidentTime: string;
  filedAt: string;
  status: 'DRAFT' | 'PENDING_VERIFICATION' | 'VERIFIED' | 'REGISTERED' | 'UNDER_INVESTIGATION' | 'RESOLVED' | 'CLOSED';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  assignedOfficer?: string;
  policeStation?: string;
  firNumber?: string;
  evidence: Array<{
    type: 'PHOTO' | 'VIDEO' | 'DOCUMENT' | 'AUDIO';
    url: string;
    description: string;
    timestamp: string;
  }>;
  timeline: Array<{
    status: string;
    timestamp: string;
    officer: string;
    notes: string;
  }>;
  autoGenerated: boolean;
  sourceAlert?: string;
}

export const FIRReview: React.FC = () => {
  const [firs, setFirs] = useState<FIR[]>([]);
  const [selectedFIR, setSelectedFIR] = useState<FIR | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState<'pending' | 'verified' | 'investigation' | 'resolved'>('pending');
  const [filterStatus, setFilterStatus] = useState('ALL');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadFIRs();
  }, []);

  const loadFIRs = async () => {
    try {
      setLoading(true);
      
      // Mock FIR data with comprehensive features
      const mockFIRs: FIR[] = [
        {
          id: '1',
          touristId: 'tourist_001',
          touristName: 'Rahul Sharma',
          incidentType: 'THEFT',
          description: 'Mobile phone and wallet stolen while visiting Red Fort. Suspect was on motorcycle.',
          location: {
            latitude: 28.6562,
            longitude: 77.2410,
            address: 'Red Fort, Netaji Subhash Marg, Chandni Chowk, New Delhi'
          },
          incidentTime: new Date(Date.now() - 7200000).toISOString(),
          filedAt: new Date(Date.now() - 3600000).toISOString(),
          status: 'PENDING_VERIFICATION',
          priority: 'HIGH',
          assignedOfficer: 'Inspector Kumar',
          policeStation: 'Chandni Chowk Police Station',
          evidence: [
            {
              type: 'PHOTO',
              url: '/evidence/theft_001_location.jpg',
              description: 'Location where incident occurred',
              timestamp: new Date(Date.now() - 6900000).toISOString()
            },
            {
              type: 'DOCUMENT',
              url: '/evidence/theft_001_receipt.pdf',
              description: 'Purchase receipt for stolen phone',
              timestamp: new Date(Date.now() - 6800000).toISOString()
            }
          ],
          timeline: [
            {
              status: 'DRAFT',
              timestamp: new Date(Date.now() - 3700000).toISOString(),
              officer: 'System Auto-Generated',
              notes: 'FIR auto-generated from SOS alert'
            },
            {
              status: 'PENDING_VERIFICATION',
              timestamp: new Date(Date.now() - 3600000).toISOString(),
              officer: 'Officer Singh',
              notes: 'Initial review completed, awaiting inspector verification'
            }
          ],
          autoGenerated: true,
          sourceAlert: 'alert_001'
        },
        {
          id: '2',
          touristId: 'tourist_002',
          touristName: 'Priya Patel',
          incidentType: 'HARASSMENT',
          description: 'Verbal harassment by group of locals near Connaught Place metro station.',
          location: {
            latitude: 28.6315,
            longitude: 77.2167,
            address: 'Connaught Place Metro Station, New Delhi'
          },
          incidentTime: new Date(Date.now() - 86400000).toISOString(),
          filedAt: new Date(Date.now() - 82800000).toISOString(),
          status: 'UNDER_INVESTIGATION',
          priority: 'MEDIUM',
          assignedOfficer: 'Inspector Verma',
          policeStation: 'Parliament Street Police Station',
          firNumber: 'FIR/2024/PS001/145',
          evidence: [
            {
              type: 'AUDIO',
              url: '/evidence/harassment_002_recording.mp3',
              description: 'Audio recording of the incident',
              timestamp: new Date(Date.now() - 86100000).toISOString()
            }
          ],
          timeline: [
            {
              status: 'DRAFT',
              timestamp: new Date(Date.now() - 83000000).toISOString(),
              officer: 'Tourist Self-Report',
              notes: 'Tourist filed report through mobile app'
            },
            {
              status: 'VERIFIED',
              timestamp: new Date(Date.now() - 82800000).toISOString(),
              officer: 'Inspector Verma',
              notes: 'Incident verified, FIR registered officially'
            },
            {
              status: 'UNDER_INVESTIGATION',
              timestamp: new Date(Date.now() - 82600000).toISOString(),
              officer: 'Inspector Verma',
              notes: 'Investigation started, CCTV footage being reviewed'
            }
          ],
          autoGenerated: false
        },
        {
          id: '3',
          touristId: 'tourist_003',
          touristName: 'David Johnson',
          incidentType: 'FRAUD',
          description: 'Overcharged at restaurant, fake currency given in change. Tourist paid ₹2000, received fake ₹500 notes.',
          location: {
            latitude: 28.6139,
            longitude: 77.2090,
            address: 'Khan Market, New Delhi'
          },
          incidentTime: new Date(Date.now() - 172800000).toISOString(),
          filedAt: new Date(Date.now() - 172200000).toISOString(),
          status: 'RESOLVED',
          priority: 'LOW',
          assignedOfficer: 'Sub-Inspector Gupta',
          policeStation: 'Tughlak Road Police Station',
          firNumber: 'FIR/2024/PS002/098',
          evidence: [
            {
              type: 'PHOTO',
              url: '/evidence/fraud_003_currency.jpg',
              description: 'Fake currency notes received',
              timestamp: new Date(Date.now() - 172100000).toISOString()
            },
            {
              type: 'DOCUMENT',
              url: '/evidence/fraud_003_bill.pdf',
              description: 'Restaurant bill',
              timestamp: new Date(Date.now() - 172150000).toISOString()
            }
          ],
          timeline: [
            {
              status: 'VERIFIED',
              timestamp: new Date(Date.now() - 172200000).toISOString(),
              officer: 'Sub-Inspector Gupta',
              notes: 'Case verified and registered'
            },
            {
              status: 'UNDER_INVESTIGATION',
              timestamp: new Date(Date.now() - 172000000).toISOString(),
              officer: 'Sub-Inspector Gupta',
              notes: 'Restaurant visited, investigation ongoing'
            },
            {
              status: 'RESOLVED',
              timestamp: new Date(Date.now() - 86400000).toISOString(),
              officer: 'Sub-Inspector Gupta',
              notes: 'Restaurant cooperated, refund provided to tourist'
            }
          ],
          autoGenerated: false
        }
      ];
      
      setFirs(mockFIRs);
    } catch (err: any) {
      setError('Failed to load FIRs');
      console.error('FIR loading error:', err);
    } finally {
      setLoading(false);
    }
  };

  const updateFIRStatus = async (firId: string, newStatus: FIR['status'], notes: string) => {
    try {
      const fir = firs.find(f => f.id === firId);
      if (!fir) return;

      const updatedFIR = {
        ...fir,
        status: newStatus,
        timeline: [
          ...fir.timeline,
          {
            status: newStatus,
            timestamp: new Date().toISOString(),
            officer: 'Current Officer',
            notes
          }
        ]
      };

      setFirs(firs.map(f => f.id === firId ? updatedFIR : f));
    } catch (err) {
      setError('Failed to update FIR status');
      console.error('FIR update error:', err);
    }
  };

  const assignOfficer = async (firId: string, officerName: string) => {
    try {
      const updatedFIRs = firs.map(fir => 
        fir.id === firId ? { ...fir, assignedOfficer: officerName } : fir
      );
      setFirs(updatedFIRs);
    } catch (err) {
      setError('Failed to assign officer');
      console.error('Officer assignment error:', err);
    }
  };

  const getStatusColor = (status: FIR['status']) => {
    switch (status) {
      case 'DRAFT': return '#757575';
      case 'PENDING_VERIFICATION': return '#FF9800';
      case 'VERIFIED': return '#2196F3';
      case 'REGISTERED': return '#4CAF50';
      case 'UNDER_INVESTIGATION': return '#9C27B0';
      case 'RESOLVED': return '#8BC34A';
      case 'CLOSED': return '#607D8B';
      default: return '#757575';
    }
  };

  const getPriorityColor = (priority: FIR['priority']) => {
    switch (priority) {
      case 'LOW': return '#4CAF50';
      case 'MEDIUM': return '#FF9800';
      case 'HIGH': return '#F44336';
      case 'CRITICAL': return '#9C27B0';
      default: return '#757575';
    }
  };

  const filteredFIRs = firs.filter(fir => {
    const matchesStatus = filterStatus === 'ALL' || fir.status === filterStatus;
    const matchesSearch = searchTerm === '' || 
      fir.touristName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      fir.incidentType.toLowerCase().includes(searchTerm.toLowerCase()) ||
      fir.firNumber?.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesStatus && matchesSearch;
  });

  const getTabFIRs = (tab: string) => {
    switch (tab) {
      case 'pending':
        return filteredFIRs.filter(f => ['DRAFT', 'PENDING_VERIFICATION'].includes(f.status));
      case 'verified':
        return filteredFIRs.filter(f => ['VERIFIED', 'REGISTERED'].includes(f.status));
      case 'investigation':
        return filteredFIRs.filter(f => f.status === 'UNDER_INVESTIGATION');
      case 'resolved':
        return filteredFIRs.filter(f => ['RESOLVED', 'CLOSED'].includes(f.status));
      default:
        return filteredFIRs;
    }
  };

  if (loading) {
    return (
      <div className="fir-review">
        <div className="loading-spinner">
          <span className="spinner"></span>
          <p>Loading FIR management system...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="fir-review">
      <div className="fir-header">
        <h2>📋 FIR Review & Management System</h2>
        <p>Review auto-generated FIRs and track case progress</p>
        
        {error && (
          <div className="error-banner">
            <span className="error-icon">⚠️</span>
            {error}
            <button onClick={() => setError('')} className="close-error">×</button>
          </div>
        )}
      </div>

      <div className="fir-controls">
        <div className="search-filters">
          <input
            type="text"
            placeholder="Search by tourist name, incident type, or FIR number..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="status-filter"
          >
            <option value="ALL">All Statuses</option>
            <option value="DRAFT">Draft</option>
            <option value="PENDING_VERIFICATION">Pending Verification</option>
            <option value="VERIFIED">Verified</option>
            <option value="UNDER_INVESTIGATION">Under Investigation</option>
            <option value="RESOLVED">Resolved</option>
          </select>
        </div>
      </div>

      <div className="fir-tabs">
        <button
          className={`tab-button ${activeTab === 'pending' ? 'active' : ''}`}
          onClick={() => setActiveTab('pending')}
        >
          ⏳ Pending Review ({getTabFIRs('pending').length})
        </button>
        <button
          className={`tab-button ${activeTab === 'verified' ? 'active' : ''}`}
          onClick={() => setActiveTab('verified')}
        >
          ✅ Verified ({getTabFIRs('verified').length})
        </button>
        <button
          className={`tab-button ${activeTab === 'investigation' ? 'active' : ''}`}
          onClick={() => setActiveTab('investigation')}
        >
          🔍 Investigation ({getTabFIRs('investigation').length})
        </button>
        <button
          className={`tab-button ${activeTab === 'resolved' ? 'active' : ''}`}
          onClick={() => setActiveTab('resolved')}
        >
          🏁 Resolved ({getTabFIRs('resolved').length})
        </button>
      </div>

      <div className="fir-content">
        <div className="fir-list">
          {getTabFIRs(activeTab).map(fir => (
            <div 
              key={fir.id}
              className={`fir-card ${selectedFIR?.id === fir.id ? 'selected' : ''}`}
              onClick={() => setSelectedFIR(fir)}
            >
              <div className="fir-card-header">
                <div className="fir-id">
                  {fir.firNumber || `DRAFT-${fir.id}`}
                  {fir.autoGenerated && <span className="auto-badge">AUTO</span>}
                </div>
                <div className="fir-priority">
                  <span 
                    className="priority-badge"
                    style={{ backgroundColor: getPriorityColor(fir.priority) }}
                  >
                    {fir.priority}
                  </span>
                </div>
              </div>
              
              <div className="fir-details">
                <h4>{fir.touristName}</h4>
                <p className="incident-type">{fir.incidentType}</p>
                <p className="incident-time">
                  {new Date(fir.incidentTime).toLocaleString()}
                </p>
                <p className="location">{fir.location.address}</p>
              </div>

              <div className="fir-status">
                <span 
                  className="status-badge"
                  style={{ backgroundColor: getStatusColor(fir.status) }}
                >
                  {fir.status.replace('_', ' ')}
                </span>
                <span className="assigned-officer">
                  {fir.assignedOfficer || 'Unassigned'}
                </span>
              </div>
            </div>
          ))}
        </div>

        {selectedFIR && (
          <div className="fir-details-panel">
            <div className="panel-header">
              <h3>FIR Details</h3>
              <button 
                onClick={() => setSelectedFIR(null)}
                className="close-panel"
              >
                ×
              </button>
            </div>

            <div className="panel-content">
              <div className="fir-summary">
                <h4>{selectedFIR.firNumber || `DRAFT-${selectedFIR.id}`}</h4>
                <div className="summary-grid">
                  <div className="summary-item">
                    <label>Tourist:</label>
                    <span>{selectedFIR.touristName}</span>
                  </div>
                  <div className="summary-item">
                    <label>Incident Type:</label>
                    <span>{selectedFIR.incidentType}</span>
                  </div>
                  <div className="summary-item">
                    <label>Priority:</label>
                    <span 
                      className="priority-badge"
                      style={{ backgroundColor: getPriorityColor(selectedFIR.priority) }}
                    >
                      {selectedFIR.priority}
                    </span>
                  </div>
                  <div className="summary-item">
                    <label>Status:</label>
                    <span 
                      className="status-badge"
                      style={{ backgroundColor: getStatusColor(selectedFIR.status) }}
                    >
                      {selectedFIR.status.replace('_', ' ')}
                    </span>
                  </div>
                  <div className="summary-item">
                    <label>Assigned Officer:</label>
                    <span>{selectedFIR.assignedOfficer || 'Not assigned'}</span>
                  </div>
                  <div className="summary-item">
                    <label>Police Station:</label>
                    <span>{selectedFIR.policeStation || 'Not assigned'}</span>
                  </div>
                </div>
              </div>

              <div className="incident-description">
                <h5>Incident Description</h5>
                <p>{selectedFIR.description}</p>
              </div>

              <div className="incident-location">
                <h5>Location</h5>
                <p>{selectedFIR.location.address}</p>
                <p>Coordinates: {selectedFIR.location.latitude}, {selectedFIR.location.longitude}</p>
              </div>

              <div className="evidence-section">
                <h5>Evidence ({selectedFIR.evidence.length})</h5>
                <div className="evidence-list">
                  {selectedFIR.evidence.map((evidence, index) => (
                    <div key={index} className="evidence-item">
                      <span className="evidence-type">{evidence.type}</span>
                      <span className="evidence-desc">{evidence.description}</span>
                      <span className="evidence-time">
                        {new Date(evidence.timestamp).toLocaleString()}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="timeline-section">
                <h5>Case Timeline</h5>
                <div className="timeline">
                  {selectedFIR.timeline.map((entry, index) => (
                    <div key={index} className="timeline-entry">
                      <div className="timeline-dot"></div>
                      <div className="timeline-content">
                        <div className="timeline-header">
                          <span className="timeline-status">{entry.status}</span>
                          <span className="timeline-time">
                            {new Date(entry.timestamp).toLocaleString()}
                          </span>
                        </div>
                        <p className="timeline-officer">Officer: {entry.officer}</p>
                        <p className="timeline-notes">{entry.notes}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="action-buttons">
                {selectedFIR.status === 'PENDING_VERIFICATION' && (
                  <>
                    <button 
                      onClick={() => updateFIRStatus(selectedFIR.id, 'VERIFIED', 'FIR verified and ready for registration')}
                      className="verify-btn"
                    >
                      ✅ Verify FIR
                    </button>
                    <button 
                      onClick={() => updateFIRStatus(selectedFIR.id, 'DRAFT', 'Returned for revision')}
                      className="reject-btn"
                    >
                      ❌ Request Revision
                    </button>
                  </>
                )}
                
                {selectedFIR.status === 'VERIFIED' && (
                  <button 
                    onClick={() => updateFIRStatus(selectedFIR.id, 'UNDER_INVESTIGATION', 'Investigation started')}
                    className="investigate-btn"
                  >
                    🔍 Start Investigation
                  </button>
                )}
                
                {selectedFIR.status === 'UNDER_INVESTIGATION' && (
                  <button 
                    onClick={() => updateFIRStatus(selectedFIR.id, 'RESOLVED', 'Case resolved successfully')}
                    className="resolve-btn"
                  >
                    🏁 Mark Resolved
                  </button>
                )}

                <button 
                  onClick={() => {
                    const officer = prompt('Enter officer name:');
                    if (officer) assignOfficer(selectedFIR.id, officer);
                  }}
                  className="assign-btn"
                >
                  👮 Assign Officer
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};